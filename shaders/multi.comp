#version 450
#extension GL_ARB_separate_shader_objects : enable

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1 ) in;

layout (push_constant) uniform constants{
  int operation;
  int linesA;
  int columnsA;
  int linesB;
  int columnsB;
}PushConstants;

layout(std430, binding = 0) buffer bufA{
  float A[]; //Para complexo, usar vetor de vec2
};

layout(std430, binding = 1) buffer bufB{
  float B[];
};

layout(std430, binding = 2) buffer bufC{
  float C[];
};

void main() {
  uint i = gl_GlobalInvocationID.x;
  uint j = gl_GlobalInvocationID.y;
  uint resLines, resColumns;
  uint index;
  if(PushConstants.operation == 0){
    // Kronecker Product
    resLines = PushConstants.linesA * PushConstants.linesB; // Calculating the size of the result matrix
    resColumns = PushConstants.columnsA * PushConstants.columnsB;
    if(i >= PushConstants.linesA || j >= PushConstants.columnsA) // If we are beyond the limits of matrix A, just return
      return;
    uint iC, jC, indexA = i*PushConstants.columnsA + j;
    for(uint iB = 0; iB < PushConstants.linesB; iB++){
      for(uint jB = 0; jB < PushConstants.columnsB; jB++){ // Running thru B matrix multiplying by A[indexA]
        iC = i*PushConstants.linesB + iB;
        jC = j*PushConstants.columnsB + jB;
        index = resColumns*iC + jC;
        C[index] = A[indexA] * B[iB*PushConstants.columnsB + jB]; // Inserting results on C
      }
    }
  }else{
    // Matrix Multiplication
    resLines = PushConstants.linesA;
    resColumns = PushConstants.columnsB;
    if(i >= resLines || j >= resColumns)
      return;
    index = resColumns*i + j; //(Columns size)*i + j
    C[index] = 0.0;
    for(uint k = 0; k < PushConstants.columnsA; k++){
      C[index] += A[i*PushConstants.columnsA + k] * B[PushConstants.columnsB*k + j];
    }
  }  
}
