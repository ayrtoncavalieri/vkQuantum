#version 450
#extension GL_ARB_separate_shader_objects : enable

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1 ) in;

layout (push_constant) uniform constants{
  int operation;
  int linesA;
  int columnsA;
  int linesB;
  int columnsB;
}PushConstants;

layout(std430, binding = 0) buffer bufA{
  float A[]; //Para complexo, usar vetor de vec2
};

layout(std430, binding = 1) buffer bufB{
  float B[];
};

layout(std430, binding = 2) buffer bufC{
  float C[];
};

void main() {
  uint i = gl_GlobalInvocationID.x;
  uint j = gl_GlobalInvocationID.y;

  if(PushConstants.operation == 0){
    
  }else{
    uint resLines, resColumns;
    resLines = PushConstants.linesA;
    resColumns = PushConstants.columnsB;
    if(i >= resLines || j >= resColumns)
      return;
    uint index = resColumns*i + j; //Tamanho das colunas*i + j
    float sum = 0.0;
    for(uint k = 0; k < PushConstants.columnsA; k++){
      sum += A[i*PushConstants.columnsA + k] * B[PushConstants.columnsB*k + j];
    }
    C[index] = sum;
  }  
}

/*
 int sum = 0;
    for(uint i = 0; i < 1024; i++) {
        sum += matrix_a[row * 1024 + i] * matrix_b[i * 1024 + col];
    }

    matrix_c[row * 1024 + col] = sum;
*/